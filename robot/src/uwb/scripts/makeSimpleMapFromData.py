#!/usr/bin/env python

import numpy as np
import scipy.optimize as sp

#constants to be set:
meansOnlyUpperHalf = True
distanceOffset = 0

means = [[[-1, 5.235372743606567, 5.470326700210571, 7.293922672271728], [-1, -1, 7.31095142364502, 5.365231904983521], [-1, -1, -1, 5.552973356246948], [-1, -1, -1, -1]],
[[-1, 5.112424621582031, 7.409152936935425, 5.456456022262573], [-1, -1, 5.378313932418823, 7.318851585388184], [-1, -1, -1, 5.566789493560791], [-1, -1, -1, -1]],
[[-1, 7.369938306808471, 5.23853832244873, 5.555460538864136], [-1, -1, 5.3873577976226805, 5.55839695930481], [-1, -1, -1, 7.324093866348266], [-1, -1, -1, -1]],
[[-1, 5.158802404403686, 5.4602610301971435, 7.320561532974243], [-1, -1, 7.327883605957031, 5.378683538436889], [-1, -1, -1, 5.5592302894592285], [-1, -1, -1, -1]],
[[-1, 5.205077447891235, 7.445553522109986, 5.320326499938965, 3.9572040176391603], [-1, -1, 5.598315734863281, 7.337548370361328, 4.085059728622436], [-1, -1, -1, 5.369883632659912, 4.09855465888977], [-1, -1, -1, -1, 3.9004388427734376], [-1, -1, -1, -1, -1]],
[[-1, 5.272590990066528, 7.518004751205444, 5.208347396850586, 3.951467227935791], [-1, -1, 5.6207272338867185, 7.366625423431397, 4.141364545822143], [-1, -1, -1, 5.409888648986817, 4.125601034164429], [-1, -1, -1, -1, 3.9157102584838865], [-1, -1, -1, -1, -1]]]

meansTrue = [[[-1, 4.82, 4.82, 6.82], [-1, -1, 6.82, 4.82], [-1, -1, -1, 4.82], [-1, -1, -1, -1]],
             [[-1, 4.82, 6.82, 4.82], [-1, -1, 4.82, 6.82], [-1, -1, -1, 4.82], [-1, -1, -1, -1]],
             [[-1, 6.82, 4.82, 4.82], [-1, -1, 4.82, 4.82], [-1, -1, -1, 6.82], [-1, -1, -1, -1]],
             [[-1, 4.82, 4.82, 6.82], [-1, -1, 6.82, 4.82], [-1, -1, -1, 4.82], [-1, -1, -1, -1]],
             [[-1, 4.82, 6.82, 4.82, 3.41], [-1, -1, 4.82, 6.82, 3.41], [-1, -1, -1, 4.82, 3.41], [-1, -1, -1, -1, 3.41], [-1, -1, -1, -1, -1]],
             [[-1, 4.82, 6.82, 4.82, 3.41], [-1, -1, 4.82, 6.82, 3.41], [-1, -1, -1, 4.82, 3.41], [-1, -1, -1, -1, 3.41], [-1, -1, -1, -1, -1]]]

def disFunc(pos, num):
    global means
    eq = []
    pos[2 * 0 + 0] = 0
    pos[2 * 0 + 1] = 0
    pos[2 * 1 + 1] = 0
    for i in range(len(means[num]) - 1):
        for k in range(i + 1, len(means[num])):
            if meansOnlyUpperHalf:
                eq.append((pos[2 * k + 0] - pos[2 * i + 0])**2 + (pos[2 * k + 1] - pos[2 * i + 1])**2 - means[num][i][k]**2)
            else:
                eq.append((pos[2 * k + 0] - pos[2 * i + 0])**2 + (pos[2 * k + 1] - pos[2 * i + 1])**2 - np.mean([means[num][i][k], means[num][k][i]])**2)
    return eq


def calcPos(num):
    global means
    pos = [1 for i in range(2 * len(means[num]))]
    pos[2 * 0 + 0] = 0
    pos[2 * 0 + 1] = 0
    pos[2 * 1 + 1] = 0
    return sp.least_squares(disFunc, pos, args=(num,))


if __name__ == '__main__':
    # print(means)
    for i in range(len(means)):
        for j in range(len(means[i])):
            for k in range(len(means[i][j])):
                means[i][j][k] += distanceOffset
    # for i, k in zip(means, meansTrue):
    #     print(np.subtract(i, k))
    for i in range(len(means)):
        print(calcPos(i).x)